"""
Script para iniciar o servidor backend com a configura√ß√£o correta.
Permite selecionar entre ambiente SQLite local e PostgreSQL/Supabase.
"""

import os
import sys
import argparse
import subprocess
import shutil
from dotenv import load_dotenv, set_key, find_dotenv

def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Iniciar o servidor backend VidaShield')
    
    # Op√ß√µes de ambiente
    parser.add_argument(
        '--env', 
        choices=['dev', 'prod'], 
        default='dev',
        help='Ambiente de execu√ß√£o (dev: SQLite local, prod: PostgreSQL/Supabase)'
    )
    
    # Op√ß√µes de porta
    parser.add_argument(
        '--port',
        type=int,
        default=5000,
        help='Porta para o servidor (padr√£o: 5000)'
    )
    
    # Ativa√ß√£o de debug
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Ativar modo de debug'
    )
    
    # For√ßar sincroniza√ß√£o de UUIDs
    parser.add_argument(
        '--sync-admin',
        action='store_true',
        help='Sincronizar usu√°rio admin com Supabase'
    )
    
    return parser.parse_args()

def update_env_file(env_type):
    """Atualiza o arquivo .env com a configura√ß√£o correta"""
    dotenv_path = find_dotenv()
    
    if not dotenv_path:
        print("‚ùå Arquivo .env n√£o encontrado")
        return False
    
    # Carrega vari√°veis do .env atual
    load_dotenv(dotenv_path)
    
    # Configura o ambiente
    if env_type == 'dev':
        # Ambiente de desenvolvimento com SQLite
        os.environ['FLASK_ENV'] = 'development'
        os.environ['DATABASE_URL'] = 'sqlite:///app.db'
        
        # Atualiza o arquivo .env
        set_key(dotenv_path, 'FLASK_ENV', 'development')
        set_key(dotenv_path, 'DATABASE_URL', 'sqlite:///app.db')
        
        print("‚úÖ Configurado ambiente de desenvolvimento com SQLite")
    else:
        # Ambiente de produ√ß√£o com PostgreSQL/Supabase
        os.environ['FLASK_ENV'] = 'production'
        
        # Verifica se a URL do PostgreSQL est√° definida
        pg_url = os.getenv('POSTGRES_URL')
        if not pg_url or '[SEU_PASSWORD_SUPABASE]' in pg_url:
            print("‚ö†Ô∏è URL do PostgreSQL n√£o configurada no .env")
            print("Configure a vari√°vel POSTGRES_URL no arquivo .env")
            return False
        
        # Atualiza o arquivo .env
        os.environ['DATABASE_URL'] = pg_url
        set_key(dotenv_path, 'FLASK_ENV', 'production')
        set_key(dotenv_path, 'DATABASE_URL', pg_url)
        
        print("‚úÖ Configurado ambiente de produ√ß√£o com PostgreSQL/Supabase")
    
    return True

def sync_admin_user():
    """Sincroniza o usu√°rio admin com o Supabase"""
    print("Sincronizando usu√°rio admin com Supabase...")
    try:
        subprocess.run([sys.executable, 'sync_users_from_supabase.py'], check=True)
        print("‚úÖ Usu√°rio admin sincronizado com sucesso")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao sincronizar usu√°rio admin")
        return False
    return True

def start_server(port, debug):
    """Inicia o servidor Flask"""
    print(f"Iniciando servidor na porta {port}...")
    
    # Configura vari√°veis de ambiente para o servidor
    env = os.environ.copy()
    
    # Prepara o comando para iniciar o servidor
    command = [sys.executable, 'app.py']
    
    if debug:
        env['FLASK_DEBUG'] = '1'
        print("üêû Modo de debug ativado")
    
    try:
        # Execu√ß√£o do servidor
        process = subprocess.Popen(command, env=env)
        print(f"‚úÖ Servidor iniciado (PID: {process.pid})")
        print(f"üåê API dispon√≠vel em: http://localhost:{port}")
        print("Pressione Ctrl+C para encerrar")
        
        # Aguarda o t√©rmino do processo
        process.wait()
    except KeyboardInterrupt:
        print("\nüõë Encerrando servidor...")
        process.terminate()
        process.wait()
        print("Servidor encerrado")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")
        return False
    
    return True

if __name__ == "__main__":
    args = parse_args()
    
    # Atualiza .env
    if not update_env_file(args.env):
        sys.exit(1)
    
    # Sincroniza usu√°rio admin se solicitado
    if args.sync_admin:
        if not sync_admin_user():
            sys.exit(1)
    
    # Inicia o servidor
    if not start_server(args.port, args.debug):
        sys.exit(1)
    
    sys.exit(0)