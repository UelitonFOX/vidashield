# Script de Limpeza do Reposit√≥rio VidaShield
# Autor: Administrador VidaShield
# Descri√ß√£o: Este script realiza a limpeza completa do reposit√≥rio para prepara√ß√£o de instala√ß√£o em m√°quina zerada

Write-Host "üßπ Iniciando limpeza do reposit√≥rio VidaShield..." -ForegroundColor Green
Write-Host "====================================================" -ForegroundColor Green

# Lista de diret√≥rios para remover
$diretorios_para_remover = @(
    "node_modules",
    "__pycache__",
    ".vscode",
    ".idea",
    "dist",
    "build",
    ".pytest_cache"
)

# Lista de arquivos para remover
$arquivos_para_remover = @(
    "*.log",
    ".DS_Store",
    "*.pyc",
    "*.pyo",
    ".coverage"
)

# Fun√ß√£o para remover diret√≥rios
function Remover-Diretorios {
    foreach ($dir in $diretorios_para_remover) {
        Write-Host "üîç Procurando diret√≥rios $dir para remover..." -ForegroundColor Yellow
        
        $diretorios = Get-ChildItem -Path . -Recurse -Directory -Filter $dir
        foreach ($diretorio in $diretorios) {
            Write-Host "   üóëÔ∏è Removendo: $($diretorio.FullName)" -ForegroundColor Red
            Remove-Item -Path $diretorio.FullName -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
}

# Fun√ß√£o para remover arquivos
function Remover-Arquivos {
    foreach ($arquivo in $arquivos_para_remover) {
        Write-Host "üîç Procurando arquivos $arquivo para remover..." -ForegroundColor Yellow
        
        $arquivos = Get-ChildItem -Path . -Recurse -File -Filter $arquivo
        foreach ($arq in $arquivos) {
            Write-Host "   üóëÔ∏è Removendo: $($arq.FullName)" -ForegroundColor Red
            Remove-Item -Path $arq.FullName -Force -ErrorAction SilentlyContinue
        }
    }
}

# Fun√ß√£o para lidar com os arquivos .env
function Lidar-Com-Env {
    Write-Host "üîç Verificando arquivos .env..." -ForegroundColor Yellow
    
    # Backend .env
    if (Test-Path -Path "backend/.env") {
        Write-Host "   üîÑ Verificando .env no backend" -ForegroundColor Cyan
        
        if (-not (Test-Path -Path "backend/.env.example")) {
            Write-Host "   ‚ö†Ô∏è N√£o existe arquivo .env.example no backend - criando a partir do .env atual (com valores gen√©ricos)" -ForegroundColor Yellow
            
            # L√™ o conte√∫do do .env e substitui valores sens√≠veis
            $conteudo = Get-Content -Path "backend/.env" -Raw
            $conteudo = $conteudo -replace "(SUPABASE_KEY|JWT_SECRET_KEY|SECRET_KEY|GOOGLE_CLIENT_SECRET|DATABASE_URL)=.*", '$1=your-secret-value-here'
            $conteudo = $conteudo -replace "(SUPABASE_URL)=.*", '$1=https://your-project.supabase.co'
            $conteudo = $conteudo -replace "(GOOGLE_CLIENT_ID)=.*", '$1=your-google-client-id'
            
            # Salva o arquivo .env.example
            $conteudo | Out-File -FilePath "backend/.env.example" -Encoding utf8
        }
        
        Write-Host "   üóëÔ∏è Removendo arquivo .env original do backend" -ForegroundColor Red
        Remove-Item -Path "backend/.env" -Force -ErrorAction SilentlyContinue
    }
    
    # Frontend .env
    if (Test-Path -Path "frontend-adm/.env") {
        Write-Host "   üîÑ Verificando .env no frontend" -ForegroundColor Cyan
        
        if (-not (Test-Path -Path "frontend-adm/.env.example")) {
            Write-Host "   ‚ö†Ô∏è N√£o existe arquivo .env.example no frontend - criando a partir do .env atual" -ForegroundColor Yellow
            
            # Cria um arquivo .env.example simples para o frontend
            "# Configura√ß√£o do frontend-adm para VidaShield" | Out-File -FilePath "frontend-adm/.env.example" -Encoding utf8
            "# Copie este arquivo para .env e ajuste as configura√ß√µes conforme necess√°rio" | Out-File -FilePath "frontend-adm/.env.example" -Encoding utf8 -Append
            "VITE_API_URL=http://localhost:5000" | Out-File -FilePath "frontend-adm/.env.example" -Encoding utf8 -Append
        }
        
        Write-Host "   üóëÔ∏è Removendo arquivo .env original do frontend" -ForegroundColor Red
        Remove-Item -Path "frontend-adm/.env" -Force -ErrorAction SilentlyContinue
    }
}

# Fun√ß√£o para verificar depend√™ncias
function Verificar-Dependencias {
    Write-Host "üîç Verificando depend√™ncias..." -ForegroundColor Yellow
    
    # Verifica package.json do frontend
    if (Test-Path -Path "frontend-adm/package.json") {
        Write-Host "   ‚úÖ Frontend package.json encontrado" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Frontend package.json n√£o encontrado" -ForegroundColor Red
    }
    
    # Verifica requirements.txt do backend
    if (Test-Path -Path "backend/requirements.txt") {
        Write-Host "   ‚úÖ Backend requirements.txt encontrado" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Backend requirements.txt n√£o encontrado" -ForegroundColor Red
    }
}

# Fun√ß√£o para remover pasta de backup
function Remover-Backup {
    if (Test-Path -Path "backup-atual") {
        Write-Host "üóëÔ∏è Removendo pasta de backup-atual" -ForegroundColor Red
        Remove-Item -Path "backup-atual" -Recurse -Force -ErrorAction SilentlyContinue
    }
}

# Execu√ß√£o principal
Remover-Diretorios
Remover-Arquivos
Lidar-Com-Env
Verificar-Dependencias
Remover-Backup

Write-Host "====================================================" -ForegroundColor Green
Write-Host "‚úÖ Limpeza do reposit√≥rio VidaShield conclu√≠da!" -ForegroundColor Green
Write-Host "O projeto est√° pronto para ser instalado em uma m√°quina limpa." -ForegroundColor Green 